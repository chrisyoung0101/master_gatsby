{"version":3,"sources":["webpack:///./src/styles/Grids.js","webpack:///./src/components/LoadingGrid.js","webpack:///./src/utils/useLatestData.js","webpack:///./src/components/ItemGrid.js","webpack:///./src/pages/index.js"],"names":["HomePageGrid","styled","div","ItemsGrid","ItemStyles","LoadingGrid","count","Array","from","length","_","i","className","src","alt","width","height","gql","String","raw","deets","ItemGrid","items","map","item","name","image","asset","url","style","background","metadata","lqip","backgroundSize","CurrentlySlicing","slicemasters","console","log","HotSlices","hotslices","HomePage","useState","setHotSlices","setSlicemasters","useEffect","fetch","process","method","headers","body","JSON","stringify","query","then","res","json","data","StoreSettings","hotSlices","slicemaster","useLatestData"],"mappings":"+KAEaA,EAAeC,IAAOC,IAAV,0EAAGD,CAAH,6EAMZE,EAAYF,IAAOC,IAAV,uEAAGD,CAAH,0DAOTG,EAAaH,IAAOC,IAAV,wEAAGD,CAAH,keAIjB,GAEA,GAcF,GASA,ICvCW,SAASI,EAAT,GAAiC,IAAVC,EAAS,EAATA,MACpC,OACE,kBAACH,EAAD,KAKGI,MAAMC,KAAK,CAAEC,OAAQH,IAAS,SAACI,EAAGC,GAAJ,OAC7B,kBAACP,EAAD,KACE,2BACE,0BAAMQ,UAAU,QAAhB,eAKF,yBACEC,IAAI,0HACJD,UAAU,UACVE,IAAI,UACJC,MAAM,MACNC,OAAO,a,mVCtBnB,IAAMC,EAAMC,OAAOC,IAIbC,EAAK,gICJI,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACjC,OACE,kBAACnB,EAAD,KACGmB,EAAMC,KAAI,SAACC,GAAD,OACT,kBAACpB,EAAD,KACE,2BACE,0BAAMQ,UAAU,QAAQY,EAAKC,OAE/B,yBACEV,MAAM,MACNC,OAAO,MACPH,IAAQW,EAAKE,MAAMC,MAAMC,IAAtB,wBACHd,IAAKU,EAAKC,KAEVI,MAAO,CACLC,WAAW,OAAQN,EAAKE,MAAMC,MAAMI,SAASC,KAAnC,IACVC,eAAgB,gBCb9B,SAASC,EAAT,GAA6C,IAAjBC,EAAgB,EAAhBA,aAE1B,OADAC,QAAQC,IAAIF,GAEV,6BACE,wBAAIvB,UAAU,UACZ,0BAAMA,UAAU,aAAhB,oBAEF,4DAEEuB,GAAgB,kBAAC9B,EAAD,CAAaC,MAAO,IAKrC6B,KAAiBA,aAAD,EAACA,EAAc1B,SAC9B,4DAGD0B,aAAA,EAAAA,EAAc1B,SAAU,kBAACY,EAAD,CAAUC,MAAOa,KAMhD,SAASG,EAAT,GAAmC,IAAdC,EAAa,EAAbA,UAEnB,OADAH,QAAQC,IAAIE,GAEV,6BACE,wBAAI3B,UAAU,UACZ,0BAAMA,UAAU,aAAhB,eAEF,0DACE2B,GAAa,kBAAClC,EAAD,CAAaC,MAAO,IAClCiC,KAAcA,aAAD,EAACA,EAAW9B,SAAU,sDACnC8B,aAAA,EAAAA,EAAW9B,SAAU,kBAACY,EAAD,CAAUC,MAAOiB,KAK9B,SAASC,IAAW,MFnBpB,WAAyB,MAEJC,qBAA3BF,EAF+B,KAEpBG,EAFoB,OAIED,qBAAjCN,EAJ+B,KAIjBQ,EAJiB,KA+CtC,OAvCAC,qBAAU,WAERC,MAAMC,+DAAqC,CACzCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAQlBC,KAAMC,KAAKC,UAAU,CACnBC,MAAOnC,EAAF,IAKKG,EAGAA,OAOXiC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAILZ,EAAaY,EAAIE,KAAKC,cAAcC,WACpCf,EAAgBW,EAAIE,KAAKC,cAAcE,kBAE1C,IAEI,CACLpB,YACAJ,gBEzBkCyB,GAA5BzB,EALyB,EAKzBA,aAAcI,EALW,EAKXA,UAEtB,OACE,yBAAK3B,UAAU,UACb,wDACA,iEACA,kBAACZ,EAAD,KACE,kBAACkC,EAAD,CAAkBC,aAAcA,IAChC,kBAACG,EAAD,CAAWC,UAAWA","file":"component---src-pages-index-js-ee30240bb44ff658237a.js","sourcesContent":["import styled from 'styled-components';\n\nexport const HomePageGrid = styled.div`\n  display: grid;\n  gap: 20px;\n  grid-template-columns: repeat(2, minmax(auto, 1fr));\n`;\n\nexport const ItemsGrid = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: 1fr 1fr;\n`;\n\n// Single Grid Item (for Home Page)\nexport const ItemStyles = styled.div`\n  text-align: center;\n  position: relative;\n  img {\n    ${'' /* border: 1px solid red; */}\n    height: auto;\n    ${'' /* img can have ghost space.  Two inline elements next to each other you'll get spacing\n    between the elements which is not margin, padding or boarder or anything it is ghost space and \n    font-size is here to handle that.  Although, it doesn't really have much effect in this case ;-)  */}\n    font-size: 0;\n  }\n  p {\n    transform: rotate(-2deg) translateY(-140%);\n    position: absolute;\n    width: 100%;\n    left: 0;\n  }\n  .mark {\n    display: inline;\n  }\n  ${'' /* animation for the shine effect */}\n  @keyframes shine {\n    from {\n      background-position: 200%;\n    }\n    to {\n      background-position: -40px;\n    }\n  }\n  ${'' /* for an image with a loading class */}\n  img.loading {\n    --shine: white;\n    --background: var(--grey);\n    background-image: linear-gradient(\n      90deg,\n      var(--background) 0px,\n      var(--shine) 40px,\n      var(--background) 80px\n    );\n    background-size: 500px;\n    animation: shine 1s infinite linear;\n  }\n`;\n","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\n// takes in a prop that is a count of the number of loader items to show\n// count will be set on the attribute of the <LoadingGrid count={4} /> tag\nexport default function LoadingGrid({ count }) {\n  return (\n    <ItemsGrid>\n      {/* makes an array of count = 4 empty spots. */}\n      {/* the second arg of Array.from() is a map function */}\n      {/* if we don't need a parameter we can just use underscore _ so we can get to the next param */}\n      {/* second param of the second arg : i = index */}\n      {Array.from({ length: count }, (_, i) => (\n        <ItemStyles>\n          <p>\n            <span className=\"mark\">Loading...</span>\n          </p>\n\n          {/* src is from https://png-pixel.com/ */}\n          {/* src is a blank image with a ratio of 5px Wide X 4px High  */}\n          <img\n            src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAECAQAAADsOj3LAAAADklEQVR42mNkgANGQkwAAJoABWH6GPAAAAAASUVORK5CYII=\"\n            className=\"loading\"\n            alt=\"Loading\"\n            width=\"500\"\n            height=\"400\"\n          />\n        </ItemStyles>\n      ))}\n    </ItemsGrid>\n  );\n}\n","import { useEffect, useState } from 'react';\n\n// fake vs code to autoformat and syntax highlight our query\nconst gql = String.raw;\n\n// create a vairable for our query since otherwise we would be writing the same thing twice\n// and this gives us only one place to go should we need to edit the query.\nconst deets = `\n    name\n    _id\n    image {\n      asset {\n        url\n        metadata {\n          lqip\n        }\n      }\n    }\n`;\n\n// when useLatestData runs :\n// create two pieces of state\n// when component mounts, run useEffect()\n// when useEffect() runs, use fetch().\n// when the fetch is done, we want to set the data to JSON\n\nexport default function useLatestData() {\n  // hot slices\n  const [hotslices, setHotSlices] = useState();\n  // slicemasters\n  const [slicemasters, setSlicemasters] = useState();\n  // Use a side effect to fetch the data from the graphql endpoint\n  // useEffect() : when the component mounts, useEffect() is invoked.  We will\n  //                also make it rerun when data changes.\n  useEffect(function () {\n    // when the component loads, fetch the data\n    fetch(process.env.GATSBY_GRAPHQL_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      // body here is an object that has a query inside of it.\n      // since we can't just send an object over the wires we need to stringify the object\n      // Note : note that we have an object that we stringify so we can send it.  When we\n      // get back our response it must be as a string because whatever it is gets put back into\n      // an object.\n      // we've modified this query to query sanity directly so some of the query syntax is a little different like _id vs id.\n      body: JSON.stringify({\n        query: gql`\n          query {\n            StoreSettings(id: \"downtown\") {\n              name\n              slicemaster {\n                ${deets}\n              }\n              hotSlices {\n                ${deets}\n              }\n            }\n          }\n        `,\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // TODO: check for errors\n        // set the data to state\n        // console.log(res.data);\n        setHotSlices(res.data.StoreSettings.hotSlices);\n        setSlicemasters(res.data.StoreSettings.slicemaster);\n      });\n  }, []); // Note we could set this to run whenever a variable like store name or whatever changes and put\n  //        //  that variable in [].  Ours will be empty.\n  return {\n    hotslices,\n    slicemasters,\n  };\n}\n","import React from 'react';\nimport { ItemsGrid, ItemStyles } from '../styles/Grids';\n\nexport default function ItemGrid({ items }) {\n  return (\n    <ItemsGrid>\n      {items.map((item) => (\n        <ItemStyles>\n          <p>\n            <span className=\"mark\">{item.name}</span>\n          </p>\n          <img\n            width=\"500\"\n            height=\"400\"\n            src={`${item.image.asset.url}?w=500&h=400&fit=crop`}\n            alt={item.name}\n            // bring in the lqip : low quality image placeholder?\n            style={{\n              background: `url(${item.image.asset.metadata.lqip})`,\n              backgroundSize: 'cover',\n            }}\n          />\n        </ItemStyles>\n      ))}\n    </ItemsGrid>\n  );\n}\n","import React from 'react';\nimport LoadingGrid from '../components/LoadingGrid';\nimport { HomePageGrid, ItemsGrid } from '../styles/Grids';\nimport useLatestData from '../utils/useLatestData';\nimport ItemGrid from '../components/ItemGrid';\n\nfunction CurrentlySlicing({ slicemasters }) {\n  console.log(slicemasters);\n  return (\n    <div>\n      <h2 className=\"center\">\n        <span className=\"mark tilt\">Slicemasters On</span>\n      </h2>\n      <p>Standing by to slice you up!</p>\n      {/* if no slicemasters, show the loading grid */}\n      {!slicemasters && <LoadingGrid count={4} />}\n      {/* handle if there is an empty slicemasters array - basically if no one is working */}\n      {/* so, if there are slicemasters and there is no slicemasters.length then render the <p> tag  */}\n      {/* Why the question mark ? adding a ? to slicemasters check there are slicemasters before \n      accessing length which without ? we would get back \"cannot access property length of undefined\" */}\n      {slicemasters && !slicemasters?.length && (\n        <p>No one is working right now!</p>\n      )}\n      {/* if there is slicemasters with a length, we will loop over them */}\n      {slicemasters?.length && <ItemGrid items={slicemasters} />}\n    </div>\n  );\n}\n\n// for the conditional logic here, we just mirror what we did with CurrentlySlicing\nfunction HotSlices({ hotslices }) {\n  console.log(hotslices);\n  return (\n    <div>\n      <h2 className=\"center\">\n        <span className=\"mark tilt\">Hot Slices</span>\n      </h2>\n      <p>Come on by, buy the slice!</p>\n      {!hotslices && <LoadingGrid count={4} />}\n      {hotslices && !hotslices?.length && <p>No pizzas in the case.</p>}\n      {hotslices?.length && <ItemGrid items={hotslices} />}\n    </div>\n  );\n}\n\nexport default function HomePage() {\n  // When the HomePage renders out, custom React hook useLatestData() is run.\n  // This hook in turn runs a side effect which is a fetch request.\n  // const result = useLatestData();\n  // after destructuring the above line we get this :\n  const { slicemasters, hotslices } = useLatestData();\n  // console.log(result);\n  return (\n    <div className=\"center\">\n      <h1>The Best Pizza Downtown!</h1>\n      <p>Open 11am to 11pm Every Single Day</p>\n      <HomePageGrid>\n        <CurrentlySlicing slicemasters={slicemasters} />\n        <HotSlices hotslices={hotslices} />\n      </HomePageGrid>\n    </div>\n  );\n}\n"],"sourceRoot":""}