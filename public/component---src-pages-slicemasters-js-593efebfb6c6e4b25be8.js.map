{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","totalCount","currentPage","base","skip","totalPages","Math","ceil","prevPage","nextPage","hasPrevPage","hasNextPage","disabled","to","Array","from","length","map","_","i","className","SlicemasterGrid","SlicemasterStyles","SlicemastersPage","data","pageContext","slicemasters","nodes","SEO","title","parseInt","process","person","slug","current","name","fluid","image","asset","description","query"],"mappings":"sPAIMA,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,4VASlB,GAME,GAKA,IAQS,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,YAEAC,GACC,EAFDC,KAEC,EADDD,MAKME,EAAaC,KAAKC,KAAKN,EAAaD,GACpCQ,EAAWN,EAAc,EACzBO,EAAWP,EAAc,EAEzBQ,EAAcF,GAAY,EAC1BG,EAAcF,GAAYJ,EAChC,OACE,kBAACT,EAAD,KACE,kBAAC,IAAD,CAAMgB,UAAWF,EAAaG,GAAOV,EAAL,IAAaK,GAA7C,UASCM,MAAMC,KAAK,CAAEC,OAAQX,IAAcY,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,IAAD,CAEEC,UAA2B,IAAhBlB,GAA2B,IAANiB,EAAU,UAAY,GACtDN,GAAOV,EAAL,KAAagB,EAAI,EAAIA,EAAI,EAAI,KAE9BA,EAAI,MAGT,kBAAC,IAAD,CAAMP,UAAWD,EAAaE,GAAOV,EAAL,IAAaM,GAA7C,W,gBC7DAY,EAAkBxB,IAAOC,IAAV,oFAAGD,CAAH,2FAMfyB,EAAoBzB,IAAOC,IAAV,sFAAGD,CAAH,wUAenB,IAiBW,SAAS0B,EAAT,GAAkD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACzCC,EAAeF,EAAKE,aAAaC,MACvC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKC,MAAK,wBAAyBJ,EAAYvB,aAAe,KAC9D,kBAACH,EAAD,CACEC,SAAU8B,SAASC,KAEnB9B,WAAYuB,EAAKE,aAAazB,WAE9BC,YAAauB,EAAYvB,aAAe,EACxCE,KAAMqB,EAAYrB,KAClBD,KAAK,kBAEP,kBAACkB,EAAD,KAEGK,EAAaT,KAAI,SAACe,GAAD,OAChB,kBAACV,EAAD,KAEE,kBAAC,IAAD,CAAMT,GAAE,gBAAkBmB,EAAOC,KAAKC,SACpC,4BAEE,0BAAMd,UAAU,QAAQY,EAAOG,QAGnC,kBAAC,IAAD,CAAKC,MAAOJ,EAAOK,MAAMC,MAAMF,QAC/B,uBAAGhB,UAAU,eAAeY,EAAOO,mBAWxC,IAAMC,EAAK","file":"component---src-pages-slicemasters-js-593efebfb6c6e4b25be8.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst PaginationStyles = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-items: center;\n  border: 1px solid var(--grey);\n  margin: 2rem 0;\n  border-radius: 5px;\n  text-align: center;\n  ${'' /* grab each flex item. & > * says And the direct decendent */}\n  & > * {\n    padding: 1rem;\n    flex: 1;\n    border-right: 1px solid var(--grey);\n    text-decoration: none;\n    ${'' /* & anything that has an aria-current property or a class of current */}\n    &[aria-current],\n    &.current {\n      color: var(--red);\n    }\n    ${'' /* for anything that has the disabled attribute, make it non-clickable */}\n    &[disabled] {\n      pointer-events: none;\n      color: var(--grey);\n    }\n  }\n`;\n\nexport default function Pagination({\n  pageSize,\n  totalCount,\n  currentPage,\n  skip,\n  base,\n}) {\n  // make some variables\n  // ///With totalPages, we are calculating a value again instead of passing it in.\n  // ///We already did this in slicemasters.js or maybe gatsby-node.js I think\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  //   ///these two vars are used to enable/disable the Prev & Next links if we are trying to navigate to a page that doesn't exist like page 0 or page 6\n  const hasPrevPage = prevPage >= 1;\n  const hasNextPage = nextPage <= totalPages;\n  return (\n    <PaginationStyles>\n      <Link disabled={!hasPrevPage} to={`${base}/${prevPage}`}>\n        &#8592; Prev\n      </Link>\n      {/* create an array that is the length of totalPages. \n      Map over each one we return a link tag that has i + 1.  \n      i + 1 allows the next higher numbered link to be named such. */}\n\n      {/* For Link tag : if i is greater than zero, then return i + 1 otherwise return a blank string  */}\n\n      {Array.from({ length: totalPages }).map((_, i) => (\n        <Link\n          // if the currentPage is 1 and the index is 0 give it a class of current otherwise don't give it a class\n          className={currentPage === 1 && i === 0 ? 'current' : ''}\n          to={`${base}/${i > 0 ? i + 1 : ''}`}\n        >\n          {i + 1}\n        </Link>\n      ))}\n      <Link disabled={!hasNextPage} to={`${base}/${nextPage}`}>\n        Next &#8594;\n      </Link>\n    </PaginationStyles>\n  );\n}\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport Pagination from '../components/Pagination';\nimport SEO from '../components/SEO';\n\nconst SlicemasterGrid = styled.div`\n  display: grid;\n  grid-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n`;\n\nconst SlicemasterStyles = styled.div`\n  a {\n    text-decoration: none;\n  }\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n  h2 {\n    transform: rotate(-2deg);\n    text-align: center;\n    font-size: 4rem;\n    margin-bottom: -2rem;\n    position: relative;\n    z-index: 2;\n  }\n  ${'' /* z-index is ignored without position relative and another maybe absolute  */}\n  .description {\n    background: var(--yellow);\n    padding: 1rem;\n    margin: 2rem;\n    margin-top: -6rem;\n    z-index: 2;\n    position: relative;\n    transform: rotate(1deg);\n    text-align: center;\n  }\n`;\n// 1. Query the data\n// 2. Loop over the data\n// 3. Display the data\n// 4. Pagination\n\nexport default function SlicemastersPage({ data, pageContext }) {\n  const slicemasters = data.slicemasters.nodes;\n  return (\n    <>\n      <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        // data.slicemasters.totalCount comes from our query below\n        totalCount={data.slicemasters.totalCount}\n        // OR 1 because we might be on the page withouth the \"/1\" in the URL\n        currentPage={pageContext.currentPage || 1}\n        skip={pageContext.skip}\n        base=\"/slicemasters\"\n      />\n      <SlicemasterGrid>\n        {/* map over array of slicemasters.  Implicitly return each person */}\n        {slicemasters.map((person) => (\n          <SlicemasterStyles>\n            {/* create a link based off the current person's slug */}\n            <Link to={`/slicemaster/${person.slug.current}`}>\n              <h2>\n                {/* start here to test by rendering out all the names */}\n                <span className=\"mark\">{person.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={person.image.asset.fluid} />\n            <p className=\"description\">{person.description}</p>\n          </SlicemasterStyles>\n        ))}\n      </SlicemasterGrid>\n    </>\n  );\n}\n\n// allSanityPerson is the name of the query we want in GraphiQL\n// We need to know how many people there are to do our pagination : so we use totalCount\n// totalCount is metadata about the query\nexport const query = graphql`\n  query($skip: Int = 0, $pageSize: Int = 4) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        name\n        slug {\n          current\n        }\n        description\n        image {\n          asset {\n            fluid(maxWidth: 410) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}